// This file was generated by: ['./curs.py']
#include <ncurses.h>
#include <climits> // INT_MAX

#undef  NCURSES_OK_ADDR
#define NCURSES_OK_ADDR(WIN) TRUE

namespace NCursesCPP_Implementation {

// Return a char*/wchar_t*/... from std::string/char*/...
template<class T> inline T*   cstr(T* s)                          { return s;         }
template<class T> inline auto cstr(T& s) -> decltype(T{}.c_str()) { return s.c_str(); }

// String length function for INPUT functions (*inchstr, *getstr).
template<class T, size_t N> inline int in_len(T(&s)[N]) { return N;            }
template<class T>           inline int in_len(T& s)     { return s.capacity(); }

// String length function for OUTPUT functions (*addstr, *insstr).
// Returning INT_MAX instead of T.size() is a little bit faster, but assumes
// that T.c_str() will be NUL-terminated.
template<class T, size_t N> inline int len(const T(&s)[N]) { return N;       }
template<class T>           inline int len(const T&)       { return INT_MAX; }

// OUTPUT functions
inline int waddch_generic(WINDOW* w, const chtype ch)           { return waddch(w, ch);       }
inline int waddch_generic(WINDOW* w, const cchar_t* ch)         { return wadd_wch(w, ch);     }
inline int waddnstr_generic(WINDOW* w, const char* s, int n)    { return waddnstr(w, s, n);   }
inline int waddnstr_generic(WINDOW* w, const wchar_t* s, int n) { return waddnwstr(w, s, n);  }
inline int winsnstr_generic(WINDOW* w, const char* s, int n)    { return winsnstr(w, s, n);   }
inline int winsnstr_generic(WINDOW* w, const wchar_t* s, int n) { return wins_nwstr(w, s, n); }
// INPUT functions
inline int wgetnstr_generic(WINDOW* w, char* s, int n)          { return wgetnstr(w, s, n);   }
inline int wgetnstr_generic(WINDOW* w, wint_t* s, int n)        { return wgetn_wstr(w, s, n); }
inline int winnstr_generic(WINDOW* w, char* s, int n)           { return winnstr(w, s, n);    }
inline int winnstr_generic(WINDOW* w, chtype* s, int n)         { return winchnstr(w, s, n);  }

namespace Public {

inline int (NC_wgetdelay)(const WINDOW* win) { return wgetdelay(win); }
inline int (NC_wgetdelay)() { return wgetdelay(stdscr); }
inline WINDOW* (NC_wgetparent)(const WINDOW* win) { return wgetparent(win); }
inline WINDOW* (NC_wgetparent)() { return wgetparent(stdscr); }
inline int (NC_wgetscrreg)(const WINDOW* win, int* top, int* bottom) { return wgetscrreg(win, top, bottom); }
inline int (NC_wgetscrreg)(int* top, int* bottom) { return wgetscrreg(stdscr, top, bottom); }
inline int (NC_erase)(WINDOW* win) { return werase(win); }
inline int (NC_erase)() { return werase(stdscr); }
inline int (NC_clear)(WINDOW* win) { return wclear(win); }
inline int (NC_clear)() { return wclear(stdscr); }
inline int (NC_clrtobot)(WINDOW* win) { return wclrtobot(win); }
inline int (NC_clrtobot)() { return wclrtobot(stdscr); }
inline int (NC_clrtoeol)(WINDOW* win) { return wclrtoeol(win); }
inline int (NC_clrtoeol)() { return wclrtoeol(stdscr); }
inline int (NC_standend)(WINDOW* win) { return wstandend(win); }
inline int (NC_standend)() { return wstandend(stdscr); }
inline int (NC_standout)(WINDOW* win) { return wstandout(win); }
inline int (NC_standout)() { return wstandout(stdscr); }
template<class Attr> inline int (NC_attron)(WINDOW* win, Attr attrs) { return wattron(win, static_cast<int>(attrs)); }
template<class Attr> inline int (NC_attron)(Attr attrs) { return wattron(stdscr, static_cast<int>(attrs)); }
template<class Attr> inline int (NC_attroff)(WINDOW* win, Attr attrs) { return wattroff(win, static_cast<int>(attrs)); }
template<class Attr> inline int (NC_attroff)(Attr attrs) { return wattroff(stdscr, static_cast<int>(attrs)); }
template<class Attr> inline int (NC_attrset)(WINDOW* win, Attr attrs) { return wattrset(win, static_cast<int>(attrs)); }
template<class Attr> inline int (NC_attrset)(Attr attrs) { return wattrset(stdscr, static_cast<int>(attrs)); }
inline int (NC_attr_on)(WINDOW* win, attr_t attrs, void* opts = NULL) { return wattr_on(win, attrs, opts); }
inline int (NC_attr_on)(attr_t attrs, void* opts = NULL) { return wattr_on(stdscr, attrs, opts); }
inline int (NC_attr_off)(WINDOW* win, attr_t attrs, void* opts = NULL) { return wattr_off(win, attrs, opts); }
inline int (NC_attr_off)(attr_t attrs, void* opts = NULL) { return wattr_off(stdscr, attrs, opts); }
inline int (NC_attr_set)(WINDOW* win, attr_t attrs, NCURSES_PAIRS_T pair, void* opts = NULL) { return wattr_set(win, attrs, pair, opts); }
inline int (NC_attr_set)(attr_t attrs, NCURSES_PAIRS_T pair, void* opts = NULL) { return wattr_set(stdscr, attrs, pair, opts); }
inline int (NC_attr_get)(const WINDOW* win, attr_t* attrs, NCURSES_PAIRS_T* pair = NULL, void* opts = NULL) { return wattr_get(win, attrs, pair, opts); }
inline int (NC_attr_get)(attr_t* attrs, NCURSES_PAIRS_T* pair = NULL, void* opts = NULL) { return wattr_get(stdscr, attrs, pair, opts); }
inline int (NC_chgat)(WINDOW* win, int n, attr_t attr, short pair, const void *opts = NULL) { return wchgat(win, n, attr, pair, opts); }
inline int (NC_chgat)(int n, attr_t attr, short pair, const void *opts = NULL) { return wchgat(stdscr, n, attr, pair, opts); }
inline int (NC_color_set)(WINDOW* win, short pair, void* opts = NULL) { return wcolor_set(win, pair, opts); }
inline int (NC_color_set)(short pair, void* opts = NULL) { return wcolor_set(stdscr, pair, opts); }
inline int (NC_getcurx)(const WINDOW* win) { return getcurx(win); }
inline int (NC_getcurx)() { return getcurx(stdscr); }
inline int (NC_getcury)(const WINDOW* win) { return getcury(win); }
inline int (NC_getcury)() { return getcury(stdscr); }
inline int (NC_getbegx)(const WINDOW* win) { return getbegx(win); }
inline int (NC_getbegx)() { return getbegx(stdscr); }
inline int (NC_getbegy)(const WINDOW* win) { return getbegy(win); }
inline int (NC_getbegy)() { return getbegy(stdscr); }
inline int (NC_getmaxx)(const WINDOW* win) { return getmaxx(win); }
inline int (NC_getmaxx)() { return getmaxx(stdscr); }
inline int (NC_getmaxy)(const WINDOW* win) { return getmaxy(win); }
inline int (NC_getmaxy)() { return getmaxy(stdscr); }
inline int (NC_getparx)(const WINDOW* win) { return getparx(win); }
inline int (NC_getparx)() { return getparx(stdscr); }
inline int (NC_getpary)(const WINDOW* win) { return getpary(win); }
inline int (NC_getpary)() { return getpary(stdscr); }
inline void (NC_getyx)(const WINDOW* win, int& y, int& x) { getyx(win, y, x); }
inline void (NC_getyx)(int& y, int& x) { getyx(stdscr, y, x); }
inline void (NC_getbegyx)(const WINDOW* win, int& y, int& x) { getbegyx(win, y, x); }
inline void (NC_getbegyx)(int& y, int& x) { getbegyx(stdscr, y, x); }
inline void (NC_getmaxyx)(const WINDOW* win, int& y, int& x) { getmaxyx(win, y, x); }
inline void (NC_getmaxyx)(int& y, int& x) { getmaxyx(stdscr, y, x); }
inline void (NC_getparyx)(const WINDOW* win, int& y, int& x) { getparyx(win, y, x); }
inline void (NC_getparyx)(int& y, int& x) { getparyx(stdscr, y, x); }
inline bool (NC_is_cleared)(const WINDOW* win) { return is_cleared(win); }
inline bool (NC_is_cleared)() { return is_cleared(stdscr); }
inline bool (NC_is_idcok)(const WINDOW* win) { return is_idcok(win); }
inline bool (NC_is_idcok)() { return is_idcok(stdscr); }
inline bool (NC_is_idlok)(const WINDOW* win) { return is_idlok(win); }
inline bool (NC_is_idlok)() { return is_idlok(stdscr); }
inline bool (NC_is_immedok)(const WINDOW* win) { return is_immedok(win); }
inline bool (NC_is_immedok)() { return is_immedok(stdscr); }
inline bool (NC_is_keypad)(const WINDOW* win) { return is_keypad(win); }
inline bool (NC_is_keypad)() { return is_keypad(stdscr); }
inline bool (NC_is_leaveok)(const WINDOW* win) { return is_leaveok(win); }
inline bool (NC_is_leaveok)() { return is_leaveok(stdscr); }
inline bool (NC_is_nodelay)(const WINDOW* win) { return is_nodelay(win); }
inline bool (NC_is_nodelay)() { return is_nodelay(stdscr); }
inline bool (NC_is_notimeout)(const WINDOW* win) { return is_notimeout(win); }
inline bool (NC_is_notimeout)() { return is_notimeout(stdscr); }
inline bool (NC_is_pad)(const WINDOW* win) { return is_pad(win); }
inline bool (NC_is_pad)() { return is_pad(stdscr); }
inline bool (NC_is_scrollok)(const WINDOW* win) { return is_scrollok(win); }
inline bool (NC_is_scrollok)() { return is_scrollok(stdscr); }
inline bool (NC_is_subwin)(const WINDOW* win) { return is_subwin(win); }
inline bool (NC_is_subwin)() { return is_subwin(stdscr); }
inline bool (NC_is_syncok)(const WINDOW* win) { return is_syncok(win); }
inline bool (NC_is_syncok)() { return is_syncok(stdscr); }
template<class Chr> inline int (NC_addch)(WINDOW* win, Chr ch) { return waddch_generic(win, ch); }
template<class Chr> inline int (NC_addch)(Chr ch) { return waddch_generic(stdscr, ch); }
template<class Chr> inline int (NC_addch)(WINDOW* win, int y, int x, Chr ch) { return wmove(win, y, x), waddch_generic(win, ch); }
template<class Chr> inline int (NC_addch)(int y, int x, Chr ch) { return wmove(stdscr, y, x), waddch_generic(stdscr, ch); }
inline int (NC_delch)(WINDOW* win) { return wdelch(win); }
inline int (NC_delch)() { return wdelch(stdscr); }
inline int (NC_delch)(WINDOW* win, int y, int x) { return wmove(win, y, x), wdelch(win); }
inline int (NC_delch)(int y, int x) { return wmove(stdscr, y, x), wdelch(stdscr); }
template<class Str> inline int (NC_addstr)(WINDOW* win, const Str& s) { return waddnstr_generic(win, cstr(s), len(s)); }
template<class Str> inline int (NC_addstr)(const Str& s) { return waddnstr_generic(stdscr, cstr(s), len(s)); }
template<class Str> inline int (NC_addstr)(WINDOW* win, int y, int x, const Str& s) { return wmove(win, y, x), waddnstr_generic(win, cstr(s), len(s)); }
template<class Str> inline int (NC_addstr)(int y, int x, const Str& s) { return wmove(stdscr, y, x), waddnstr_generic(stdscr, cstr(s), len(s)); }
template<class Str> inline int (NC_addstr)(WINDOW* win, const Str& s, int n) { return waddnstr_generic(win, cstr(s), n); }
template<class Str> inline int (NC_addstr)(const Str& s, int n) { return waddnstr_generic(stdscr, cstr(s), n); }
template<class Str> inline int (NC_addstr)(WINDOW* win, int y, int x, const Str& s, int n) { return wmove(win, y, x), waddnstr_generic(win, cstr(s), n); }
template<class Str> inline int (NC_addstr)(int y, int x, const Str& s, int n) { return wmove(stdscr, y, x), waddnstr_generic(stdscr, cstr(s), n); }
template<class Str> inline int (NC_insstr)(WINDOW* win, const Str& s) { return winsnstr_generic(win, cstr(s), len(s)); }
template<class Str> inline int (NC_insstr)(const Str& s) { return winsnstr_generic(stdscr, cstr(s), len(s)); }
template<class Str> inline int (NC_insstr)(WINDOW* win, int y, int x, const Str& s) { return wmove(win, y, x), winsnstr_generic(win, cstr(s), len(s)); }
template<class Str> inline int (NC_insstr)(int y, int x, const Str& s) { return wmove(stdscr, y, x), winsnstr_generic(stdscr, cstr(s), len(s)); }
template<class Str> inline int (NC_insstr)(WINDOW* win, const Str& s, int n) { return winsnstr_generic(win, cstr(s), n); }
template<class Str> inline int (NC_insstr)(const Str& s, int n) { return winsnstr_generic(stdscr, cstr(s), n); }
template<class Str> inline int (NC_insstr)(WINDOW* win, int y, int x, const Str& s, int n) { return wmove(win, y, x), winsnstr_generic(win, cstr(s), n); }
template<class Str> inline int (NC_insstr)(int y, int x, const Str& s, int n) { return wmove(stdscr, y, x), winsnstr_generic(stdscr, cstr(s), n); }
inline int (NC_getch)(WINDOW* win) { return wgetch(win); }
inline int (NC_getch)() { return wgetch(stdscr); }
inline int (NC_getch)(WINDOW* win, int y, int x) { return wmove(win, y, x), wgetch(win); }
inline int (NC_getch)(int y, int x) { return wmove(stdscr, y, x), wgetch(stdscr); }
inline int (NC_getch)(WINDOW* win, wint_t* ch) { return wget_wch(win, ch); }
inline int (NC_getch)(wint_t* ch) { return wget_wch(stdscr, ch); }
inline int (NC_getch)(WINDOW* win, int y, int x, wint_t* ch) { return wmove(win, y, x), wget_wch(win, ch); }
inline int (NC_getch)(int y, int x, wint_t* ch) { return wmove(stdscr, y, x), wget_wch(stdscr, ch); }
template<class Str> inline int (NC_getstr)(WINDOW* win, Str& s) { return wgetnstr_generic(win, cstr(s), in_len(s)); }
template<class Str> inline int (NC_getstr)(Str& s) { return wgetnstr_generic(stdscr, cstr(s), in_len(s)); }
template<class Str> inline int (NC_getstr)(WINDOW* win, int y, int x, Str& s) { return wmove(win, y, x), wgetnstr_generic(win, cstr(s), in_len(s)); }
template<class Str> inline int (NC_getstr)(int y, int x, Str& s) { return wmove(stdscr, y, x), wgetnstr_generic(stdscr, cstr(s), in_len(s)); }
template<class Str> inline int (NC_getstr)(WINDOW* win, Str& s, int n) { return wgetnstr_generic(win, cstr(s), n); }
template<class Str> inline int (NC_getstr)(Str& s, int n) { return wgetnstr_generic(stdscr, cstr(s), n); }
template<class Str> inline int (NC_getstr)(WINDOW* win, int y, int x, Str& s, int n) { return wmove(win, y, x), wgetnstr_generic(win, cstr(s), n); }
template<class Str> inline int (NC_getstr)(int y, int x, Str& s, int n) { return wmove(stdscr, y, x), wgetnstr_generic(stdscr, cstr(s), n); }
template<class Str> inline int (NC_instr)(WINDOW* win, Str& s) { return winnstr_generic(win, cstr(s), in_len(s)); }
template<class Str> inline int (NC_instr)(Str& s) { return winnstr_generic(stdscr, cstr(s), in_len(s)); }
template<class Str> inline int (NC_instr)(WINDOW* win, int y, int x, Str& s) { return wmove(win, y, x), winnstr_generic(win, cstr(s), in_len(s)); }
template<class Str> inline int (NC_instr)(int y, int x, Str& s) { return wmove(stdscr, y, x), winnstr_generic(stdscr, cstr(s), in_len(s)); }
template<class Str> inline int (NC_instr)(WINDOW* win, Str& s, int n) { return winnstr_generic(win, cstr(s), n); }
template<class Str> inline int (NC_instr)(Str& s, int n) { return winnstr_generic(stdscr, cstr(s), n); }
template<class Str> inline int (NC_instr)(WINDOW* win, int y, int x, Str& s, int n) { return wmove(win, y, x), winnstr_generic(win, cstr(s), n); }
template<class Str> inline int (NC_instr)(int y, int x, Str& s, int n) { return wmove(stdscr, y, x), winnstr_generic(stdscr, cstr(s), n); }

struct CursesWindow {
  WINDOW* win;
  CursesWindow()           : win(NULL) {}
  CursesWindow(WINDOW* w_) : win(w_)   {}
  using K = CursesWindow;

  template<class S>
  inline K& operator<<(const S& s) noexcept { NC_addstr(s); return *this; }
  inline K& operator<<(char c)     noexcept { NC_addch(static_cast<chtype>(c)); return *this; }
  inline K& operator<<(wchar_t c)  noexcept { waddnwstr(win, &c, 1); return *this; }
  inline K& operator<<(int i)      noexcept { wprintw(win, "%d", i);  return *this; }
  inline K& operator<<(size_t s)   noexcept { wprintw(win, "%zu", s); return *this; }
  inline K& operator<<(float f)    noexcept { wprintw(win, "%f", f);  return *this; }
  inline K& operator<<(double d)   noexcept { wprintw(win, "%f", d);  return *this; }

  
inline int (wgetdelay)() const noexcept { return wgetdelay(win); }
inline int (NC_wgetdelay)() const noexcept { return wgetdelay(win); }
inline WINDOW* (wgetparent)() const noexcept { return wgetparent(win); }
inline WINDOW* (NC_wgetparent)() const noexcept { return wgetparent(win); }
inline int (wgetscrreg)(int* top, int* bottom) const noexcept { return wgetscrreg(win, top, bottom); }
inline int (NC_wgetscrreg)(int* top, int* bottom) const noexcept { return wgetscrreg(win, top, bottom); }
inline int (erase)() noexcept { return werase(win); }
inline int (NC_erase)() noexcept { return werase(win); }
inline int (clear)() noexcept { return wclear(win); }
inline int (NC_clear)() noexcept { return wclear(win); }
inline int (clrtobot)() noexcept { return wclrtobot(win); }
inline int (NC_clrtobot)() noexcept { return wclrtobot(win); }
inline int (clrtoeol)() noexcept { return wclrtoeol(win); }
inline int (NC_clrtoeol)() noexcept { return wclrtoeol(win); }
inline int (standend)() noexcept { return wstandend(win); }
inline int (NC_standend)() noexcept { return wstandend(win); }
inline int (standout)() noexcept { return wstandout(win); }
inline int (NC_standout)() noexcept { return wstandout(win); }
template<class Attr> inline int (attron)(Attr attrs) noexcept { return wattron(win, static_cast<int>(attrs)); }
template<class Attr> inline int (NC_attron)(Attr attrs) noexcept { return wattron(win, static_cast<int>(attrs)); }
template<class Attr> inline int (attroff)(Attr attrs) noexcept { return wattroff(win, static_cast<int>(attrs)); }
template<class Attr> inline int (NC_attroff)(Attr attrs) noexcept { return wattroff(win, static_cast<int>(attrs)); }
template<class Attr> inline int (attrset)(Attr attrs) noexcept { return wattrset(win, static_cast<int>(attrs)); }
template<class Attr> inline int (NC_attrset)(Attr attrs) noexcept { return wattrset(win, static_cast<int>(attrs)); }
inline int (attr_on)(attr_t attrs, void* opts = NULL) noexcept { return wattr_on(win, attrs, opts); }
inline int (NC_attr_on)(attr_t attrs, void* opts = NULL) noexcept { return wattr_on(win, attrs, opts); }
inline int (attr_off)(attr_t attrs, void* opts = NULL) noexcept { return wattr_off(win, attrs, opts); }
inline int (NC_attr_off)(attr_t attrs, void* opts = NULL) noexcept { return wattr_off(win, attrs, opts); }
inline int (attr_set)(attr_t attrs, NCURSES_PAIRS_T pair, void* opts = NULL) noexcept { return wattr_set(win, attrs, pair, opts); }
inline int (NC_attr_set)(attr_t attrs, NCURSES_PAIRS_T pair, void* opts = NULL) noexcept { return wattr_set(win, attrs, pair, opts); }
inline int (attr_get)(attr_t* attrs, NCURSES_PAIRS_T* pair = NULL, void* opts = NULL) const noexcept { return wattr_get(win, attrs, pair, opts); }
inline int (NC_attr_get)(attr_t* attrs, NCURSES_PAIRS_T* pair = NULL, void* opts = NULL) const noexcept { return wattr_get(win, attrs, pair, opts); }
inline int (chgat)(int n, attr_t attr, short pair, const void *opts = NULL) noexcept { return wchgat(win, n, attr, pair, opts); }
inline int (NC_chgat)(int n, attr_t attr, short pair, const void *opts = NULL) noexcept { return wchgat(win, n, attr, pair, opts); }
inline int (color_set)(short pair, void* opts = NULL) noexcept { return wcolor_set(win, pair, opts); }
inline int (NC_color_set)(short pair, void* opts = NULL) noexcept { return wcolor_set(win, pair, opts); }
inline int (getcurx)() const noexcept { return getcurx(win); }
inline int (NC_getcurx)() const noexcept { return getcurx(win); }
inline int (getcury)() const noexcept { return getcury(win); }
inline int (NC_getcury)() const noexcept { return getcury(win); }
inline int (getbegx)() const noexcept { return getbegx(win); }
inline int (NC_getbegx)() const noexcept { return getbegx(win); }
inline int (getbegy)() const noexcept { return getbegy(win); }
inline int (NC_getbegy)() const noexcept { return getbegy(win); }
inline int (getmaxx)() const noexcept { return getmaxx(win); }
inline int (NC_getmaxx)() const noexcept { return getmaxx(win); }
inline int (getmaxy)() const noexcept { return getmaxy(win); }
inline int (NC_getmaxy)() const noexcept { return getmaxy(win); }
inline int (getparx)() const noexcept { return getparx(win); }
inline int (NC_getparx)() const noexcept { return getparx(win); }
inline int (getpary)() const noexcept { return getpary(win); }
inline int (NC_getpary)() const noexcept { return getpary(win); }
inline void (getyx)(int& y, int& x) const noexcept { getyx(win, y, x); }
inline void (NC_getyx)(int& y, int& x) const noexcept { getyx(win, y, x); }
inline void (getbegyx)(int& y, int& x) const noexcept { getbegyx(win, y, x); }
inline void (NC_getbegyx)(int& y, int& x) const noexcept { getbegyx(win, y, x); }
inline void (getmaxyx)(int& y, int& x) const noexcept { getmaxyx(win, y, x); }
inline void (NC_getmaxyx)(int& y, int& x) const noexcept { getmaxyx(win, y, x); }
inline void (getparyx)(int& y, int& x) const noexcept { getparyx(win, y, x); }
inline void (NC_getparyx)(int& y, int& x) const noexcept { getparyx(win, y, x); }
inline bool (is_cleared)() const noexcept { return is_cleared(win); }
inline bool (NC_is_cleared)() const noexcept { return is_cleared(win); }
inline bool (is_idcok)() const noexcept { return is_idcok(win); }
inline bool (NC_is_idcok)() const noexcept { return is_idcok(win); }
inline bool (is_idlok)() const noexcept { return is_idlok(win); }
inline bool (NC_is_idlok)() const noexcept { return is_idlok(win); }
inline bool (is_immedok)() const noexcept { return is_immedok(win); }
inline bool (NC_is_immedok)() const noexcept { return is_immedok(win); }
inline bool (is_keypad)() const noexcept { return is_keypad(win); }
inline bool (NC_is_keypad)() const noexcept { return is_keypad(win); }
inline bool (is_leaveok)() const noexcept { return is_leaveok(win); }
inline bool (NC_is_leaveok)() const noexcept { return is_leaveok(win); }
inline bool (is_nodelay)() const noexcept { return is_nodelay(win); }
inline bool (NC_is_nodelay)() const noexcept { return is_nodelay(win); }
inline bool (is_notimeout)() const noexcept { return is_notimeout(win); }
inline bool (NC_is_notimeout)() const noexcept { return is_notimeout(win); }
inline bool (is_pad)() const noexcept { return is_pad(win); }
inline bool (NC_is_pad)() const noexcept { return is_pad(win); }
inline bool (is_scrollok)() const noexcept { return is_scrollok(win); }
inline bool (NC_is_scrollok)() const noexcept { return is_scrollok(win); }
inline bool (is_subwin)() const noexcept { return is_subwin(win); }
inline bool (NC_is_subwin)() const noexcept { return is_subwin(win); }
inline bool (is_syncok)() const noexcept { return is_syncok(win); }
inline bool (NC_is_syncok)() const noexcept { return is_syncok(win); }
template<class Chr> inline int (addch)(Chr ch) noexcept { return waddch_generic(win, ch); }
template<class Chr> inline int (NC_addch)(Chr ch) noexcept { return waddch_generic(win, ch); }
template<class Chr> inline int (addch)(int y, int x, Chr ch) noexcept { return wmove(win, y, x), waddch_generic(win, ch); }
template<class Chr> inline int (NC_addch)(int y, int x, Chr ch) noexcept { return wmove(win, y, x), waddch_generic(win, ch); }
inline int (delch)() noexcept { return wdelch(win); }
inline int (NC_delch)() noexcept { return wdelch(win); }
inline int (delch)(int y, int x) noexcept { return wmove(win, y, x), wdelch(win); }
inline int (NC_delch)(int y, int x) noexcept { return wmove(win, y, x), wdelch(win); }
template<class Str> inline int (addstr)(const Str& s) noexcept { return waddnstr_generic(win, cstr(s), len(s)); }
template<class Str> inline int (NC_addstr)(const Str& s) noexcept { return waddnstr_generic(win, cstr(s), len(s)); }
template<class Str> inline int (addstr)(int y, int x, const Str& s) noexcept { return wmove(win, y, x), waddnstr_generic(win, cstr(s), len(s)); }
template<class Str> inline int (NC_addstr)(int y, int x, const Str& s) noexcept { return wmove(win, y, x), waddnstr_generic(win, cstr(s), len(s)); }
template<class Str> inline int (addstr)(const Str& s, int n) noexcept { return waddnstr_generic(win, cstr(s), n); }
template<class Str> inline int (NC_addstr)(const Str& s, int n) noexcept { return waddnstr_generic(win, cstr(s), n); }
template<class Str> inline int (addstr)(int y, int x, const Str& s, int n) noexcept { return wmove(win, y, x), waddnstr_generic(win, cstr(s), n); }
template<class Str> inline int (NC_addstr)(int y, int x, const Str& s, int n) noexcept { return wmove(win, y, x), waddnstr_generic(win, cstr(s), n); }
template<class Str> inline int (insstr)(const Str& s) noexcept { return winsnstr_generic(win, cstr(s), len(s)); }
template<class Str> inline int (NC_insstr)(const Str& s) noexcept { return winsnstr_generic(win, cstr(s), len(s)); }
template<class Str> inline int (insstr)(int y, int x, const Str& s) noexcept { return wmove(win, y, x), winsnstr_generic(win, cstr(s), len(s)); }
template<class Str> inline int (NC_insstr)(int y, int x, const Str& s) noexcept { return wmove(win, y, x), winsnstr_generic(win, cstr(s), len(s)); }
template<class Str> inline int (insstr)(const Str& s, int n) noexcept { return winsnstr_generic(win, cstr(s), n); }
template<class Str> inline int (NC_insstr)(const Str& s, int n) noexcept { return winsnstr_generic(win, cstr(s), n); }
template<class Str> inline int (insstr)(int y, int x, const Str& s, int n) noexcept { return wmove(win, y, x), winsnstr_generic(win, cstr(s), n); }
template<class Str> inline int (NC_insstr)(int y, int x, const Str& s, int n) noexcept { return wmove(win, y, x), winsnstr_generic(win, cstr(s), n); }
inline int (getch)() noexcept { return wgetch(win); }
inline int (NC_getch)() noexcept { return wgetch(win); }
inline int (getch)(int y, int x) noexcept { return wmove(win, y, x), wgetch(win); }
inline int (NC_getch)(int y, int x) noexcept { return wmove(win, y, x), wgetch(win); }
inline int (getch)(wint_t* ch) noexcept { return wget_wch(win, ch); }
inline int (NC_getch)(wint_t* ch) noexcept { return wget_wch(win, ch); }
inline int (getch)(int y, int x, wint_t* ch) noexcept { return wmove(win, y, x), wget_wch(win, ch); }
inline int (NC_getch)(int y, int x, wint_t* ch) noexcept { return wmove(win, y, x), wget_wch(win, ch); }
template<class Str> inline int (getstr)(Str& s) noexcept { return wgetnstr_generic(win, cstr(s), in_len(s)); }
template<class Str> inline int (NC_getstr)(Str& s) noexcept { return wgetnstr_generic(win, cstr(s), in_len(s)); }
template<class Str> inline int (getstr)(int y, int x, Str& s) noexcept { return wmove(win, y, x), wgetnstr_generic(win, cstr(s), in_len(s)); }
template<class Str> inline int (NC_getstr)(int y, int x, Str& s) noexcept { return wmove(win, y, x), wgetnstr_generic(win, cstr(s), in_len(s)); }
template<class Str> inline int (getstr)(Str& s, int n) noexcept { return wgetnstr_generic(win, cstr(s), n); }
template<class Str> inline int (NC_getstr)(Str& s, int n) noexcept { return wgetnstr_generic(win, cstr(s), n); }
template<class Str> inline int (getstr)(int y, int x, Str& s, int n) noexcept { return wmove(win, y, x), wgetnstr_generic(win, cstr(s), n); }
template<class Str> inline int (NC_getstr)(int y, int x, Str& s, int n) noexcept { return wmove(win, y, x), wgetnstr_generic(win, cstr(s), n); }
template<class Str> inline int (instr)(Str& s) noexcept { return winnstr_generic(win, cstr(s), in_len(s)); }
template<class Str> inline int (NC_instr)(Str& s) noexcept { return winnstr_generic(win, cstr(s), in_len(s)); }
template<class Str> inline int (instr)(int y, int x, Str& s) noexcept { return wmove(win, y, x), winnstr_generic(win, cstr(s), in_len(s)); }
template<class Str> inline int (NC_instr)(int y, int x, Str& s) noexcept { return wmove(win, y, x), winnstr_generic(win, cstr(s), in_len(s)); }
template<class Str> inline int (instr)(Str& s, int n) noexcept { return winnstr_generic(win, cstr(s), n); }
template<class Str> inline int (NC_instr)(Str& s, int n) noexcept { return winnstr_generic(win, cstr(s), n); }
template<class Str> inline int (instr)(int y, int x, Str& s, int n) noexcept { return wmove(win, y, x), winnstr_generic(win, cstr(s), n); }
template<class Str> inline int (NC_instr)(int y, int x, Str& s, int n) noexcept { return wmove(win, y, x), winnstr_generic(win, cstr(s), n); }

}; // class CursesWindow
} // namespace Public
} // namespace NCursesCPP_Implementation


#undef clear
#undef erase
#undef move

#undef  wgetdelay
#define wgetdelay NC_wgetdelay
#undef  wgetparent
#define wgetparent NC_wgetparent
#undef  wgetscrreg
#define wgetscrreg NC_wgetscrreg
#undef  clrtobot
#define clrtobot NC_clrtobot
#undef  clrtoeol
#define clrtoeol NC_clrtoeol
#undef  standend
#define standend NC_standend
#undef  standout
#define standout NC_standout
#undef  attron
#define attron NC_attron
#undef  attroff
#define attroff NC_attroff
#undef  attrset
#define attrset NC_attrset
#undef  attr_on
#define attr_on NC_attr_on
#undef  attr_off
#define attr_off NC_attr_off
#undef  attr_set
#define attr_set NC_attr_set
#undef  attr_get
#define attr_get NC_attr_get
#undef  chgat
#define chgat NC_chgat
#undef  color_set
#define color_set NC_color_set
#undef  getcurx
#define getcurx NC_getcurx
#undef  getcury
#define getcury NC_getcury
#undef  getbegx
#define getbegx NC_getbegx
#undef  getbegy
#define getbegy NC_getbegy
#undef  getmaxx
#define getmaxx NC_getmaxx
#undef  getmaxy
#define getmaxy NC_getmaxy
#undef  getparx
#define getparx NC_getparx
#undef  getpary
#define getpary NC_getpary
#undef  getyx
#define getyx NC_getyx
#undef  getbegyx
#define getbegyx NC_getbegyx
#undef  getmaxyx
#define getmaxyx NC_getmaxyx
#undef  getparyx
#define getparyx NC_getparyx
#undef  is_cleared
#define is_cleared NC_is_cleared
#undef  is_idcok
#define is_idcok NC_is_idcok
#undef  is_idlok
#define is_idlok NC_is_idlok
#undef  is_immedok
#define is_immedok NC_is_immedok
#undef  is_keypad
#define is_keypad NC_is_keypad
#undef  is_leaveok
#define is_leaveok NC_is_leaveok
#undef  is_nodelay
#define is_nodelay NC_is_nodelay
#undef  is_notimeout
#define is_notimeout NC_is_notimeout
#undef  is_pad
#define is_pad NC_is_pad
#undef  is_scrollok
#define is_scrollok NC_is_scrollok
#undef  is_subwin
#define is_subwin NC_is_subwin
#undef  is_syncok
#define is_syncok NC_is_syncok
#undef  addch
#define addch NC_addch
#undef  delch
#define delch NC_delch
#undef  addstr
#define addstr NC_addstr
#undef  insstr
#define insstr NC_insstr
#undef  getch
#define getch NC_getch
#undef  getstr
#define getstr NC_getstr
#undef  instr
#define instr NC_instr
#undef  mvwaddch
#define mvwaddch NC_addch
#undef  mvaddch
#define mvaddch NC_addch
#undef  waddch
#define waddch NC_addch
#undef  mvwgetch
#define mvwgetch NC_getch
#undef  mvgetch
#define mvgetch NC_getch
#undef  wgetch
#define wgetch NC_getch
#undef  mvwaddnwstr
#define mvwaddnwstr NC_addstr
#undef  mvwaddnstr
#define mvwaddnstr NC_addstr
#undef  mvwaddwstr
#define mvwaddwstr NC_addstr
#undef  mvwaddstr
#define mvwaddstr NC_addstr
#undef  mvaddnwstr
#define mvaddnwstr NC_addstr
#undef  mvaddnstr
#define mvaddnstr NC_addstr
#undef  mvaddwstr
#define mvaddwstr NC_addstr
#undef  mvaddstr
#define mvaddstr NC_addstr
#undef  waddnwstr
#define waddnwstr NC_addstr
#undef  waddnstr
#define waddnstr NC_addstr
#undef  waddwstr
#define waddwstr NC_addstr
#undef  waddstr
#define waddstr NC_addstr
#undef  addnwstr
#define addnwstr NC_addstr
#undef  addnstr
#define addnstr NC_addstr
#undef  addwstr
#define addwstr NC_addstr
#undef  mvwinsnstr
#define mvwinsnstr NC_insstr
#undef  mvwins_nwstr
#define mvwins_nwstr NC_insstr
#undef  mvwins_wstr
#define mvwins_wstr NC_insstr
#undef  mvinsnstr
#define mvinsnstr NC_insstr
#undef  mvins_nwstr
#define mvins_nwstr NC_insstr
#undef  mvins_wstr
#define mvins_wstr NC_insstr
#undef  winsnstr
#define winsnstr NC_insstr
#undef  wins_nwstr
#define wins_nwstr NC_insstr
#undef  wins_wstr
#define wins_wstr NC_insstr
#undef  insnstr
#define insnstr NC_insstr
#undef  ins_nwstr
#define ins_nwstr NC_insstr
#undef  ins_wstr
#define ins_wstr NC_insstr
#undef  mvwgetnstr
#define mvwgetnstr NC_getstr
#undef  mvwget_nwstr
#define mvwget_nwstr NC_getstr
#undef  mvwget_wstr
#define mvwget_wstr NC_getstr
#undef  mvgetnstr
#define mvgetnstr NC_getstr
#undef  mvget_nwstr
#define mvget_nwstr NC_getstr
#undef  mvget_wstr
#define mvget_wstr NC_getstr
#undef  wgetnstr
#define wgetnstr NC_getstr
#undef  wget_nwstr
#define wget_nwstr NC_getstr
#undef  wget_wstr
#define wget_wstr NC_getstr
#undef  getnstr
#define getnstr NC_getstr
#undef  get_nwstr
#define get_nwstr NC_getstr
#undef  get_wstr
#define get_wstr NC_getstr
#undef  mvwinchstr
#define mvwinchstr NC_instr
#undef  mvwinstr
#define mvwinstr NC_instr
#undef  mvinchstr
#define mvinchstr NC_instr
#undef  mvinstr
#define mvinstr NC_instr
#undef  winchstr
#define winchstr NC_instr
#undef  winstr
#define winstr NC_instr
#undef  inchstr
#define inchstr NC_instr
using namespace NCursesCPP_Implementation::Public;

