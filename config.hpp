#ifndef _CONFIG_HPP
#define _CONFIG_HPP

#include <string>
#include <vector>

enum Justification { Right, Left };

class PlaylistColumnFormat {
  public:
    std::string column;
    int fg;
    int bg;
    unsigned int rel;
    unsigned int size;
    enum Justification justification;

    PlaylistColumnFormat()
      : fg(-1), bg(-1), rel(0), size(0)
    {
    }
};

class PlayingInfoFormatFoo {
  public:
    int fg;
    int bg;
    unsigned int attributes;
    std::string tag;
    std::string text;

    PlayingInfoFormatFoo()
      : fg(-1), bg(-1), attributes(0)
    {
    }
};

typedef std::vector<PlaylistColumnFormat> PlaylistColumns;
typedef std::vector<PlayingInfoFormatFoo> PlayingInfoFormat;

namespace Ektoplayer {
  class Config {
    private:
      Config(); // Singleton
    public:
      /* Members generated by `./config.py hpp` */
      static int threads;
      static int small_update_pages;
      static int playlist_load_newest;
      static bool prefetch;
      static bool use_cache;
      static bool tabbar_display;
      static bool playinginfo_display;
      static bool progressbar_display;
      static bool delete_after_extraction;
      static bool auto_extract_to_archive_dir;
      static char progressbar_rest_char;
      static char progressbar_progress_char;
      static std::string log_file;
      static std::string temp_dir;
      static std::string cache_dir;
      static std::string use_colors;
      static std::string archive_dir;
      static std::string audio_system;
      static std::string download_dir;
      static std::string database_file;
      static PlaylistColumns browser_format;
      static PlaylistColumns playlist_format;
      static PlaylistColumns browser_format_256;
      static PlaylistColumns playlist_format_256;
      static PlayingInfoFormat playinginfo_format_top;
      static PlayingInfoFormat playinginfo_format_bottom;
      static PlayingInfoFormat playinginfo_format_top_256;
      static PlayingInfoFormat playinginfo_format_bottom_256;
      static std::vector<std::string> main_widgets;
      static std::vector<std::string> tabs_widgets;

      static void init();
      static void set(const std::string&, const std::string&);
      static void read(const std::string&);
  };
}

#endif
